{
  "version": 3,
  "sources": ["../packages/vite-plugin/src/index.js"],
  "sourcesContent": ["import { readFileSync, readdirSync, existsSync } from 'fs';\nimport { resolve, join } from 'path';\nimport { watch } from 'chokidar';\nimport ts from 'typescript';\n\nexport default function bond(options = {}) {\n  const {\n    viewsPath = 'resources/views',\n    watchFiles = true,\n  } = options;\n\n  let server;\n  const virtualModuleId = 'virtual:bond';\n  const resolvedVirtualModuleId = '\\0' + virtualModuleId;\n  \n  /**\n   * Find all .blade.php files recursively  \n   */\n  function findBladeFiles(dir) {\n    if (!existsSync(dir)) {\n      return [];\n    }\n\n    const files = [];\n    \n    function traverse(currentDir) {\n      try {\n        const items = readdirSync(currentDir, { withFileTypes: true });\n        \n        for (const item of items) {\n          const fullPath = join(currentDir, item.name);\n          \n          if (item.isDirectory()) {\n            traverse(fullPath);\n          } else if (item.name.endsWith('.blade.php')) {\n            files.push(fullPath);\n          }\n        }\n      } catch (error) {\n        console.warn(`[bond] Cannot read directory ${currentDir}:`, error.message);\n      }\n    }\n    \n    traverse(dir);\n    return files;\n  }\n\n\n  /**\n   * Extract <script setup> content from blade file (only first one)\n   */\n  function extractScriptSetup(content) {\n    const scriptSetupRegex = /<script\\s[^>]*\\bsetup\\b[^>]*>([\\s\\S]*?)<\\/script>/i;\n    const match = scriptSetupRegex.exec(content);\n    \n    return match ? match[1].trim() : null;\n  }\n\n  /**\n   * Generate component name from file path\n   */\n  function generateComponentName(filePath) {\n    const relativePath = filePath\n      .replace(resolve(viewsPath), '')\n      .replace(/^\\//, '')\n      .replace(/\\.blade\\.php$/, '')\n      .replace(/\\//g, '.');\n    \n    return relativePath;\n  }\n\n  /**\n   * Extract prop names from TypeScript type (including optional properties)\n   */\n  function extractPropNames(typeNode) {\n    if (!ts.isTypeLiteralNode(typeNode)) {\n      return [];\n    }\n\n    const propNames = [];\n    \n    for (const member of typeNode.members) {\n      if (ts.isPropertySignature(member) && member.name) {\n        if (ts.isIdentifier(member.name)) {\n          propNames.push(member.name.text);\n        }\n      }\n    }\n\n    return propNames;\n  }\n\n  /**\n   * Transform mount() calls and add import if needed\n   */\n  function transformMountCalls(code, filePath) {\n    const componentName = generateComponentName(filePath);\n    \n    // Check if mount is used in the code\n    const usesMountFunction = code.includes('mount(');\n    \n    // Create TypeScript source file\n    const sourceFile = ts.createSourceFile(\n      'temp.ts',\n      code,\n      ts.ScriptTarget.ESNext,\n      true\n    );\n\n    // Track if we made any changes\n    let hasChanges = false;\n\n    // Transform the AST\n    const transformer = (context) => {\n      return (rootNode) => {\n        function visit(node) {\n          // Look for mount() call expressions\n          if (ts.isCallExpression(node) && \n              ts.isIdentifier(node.expression) && \n              node.expression.text === 'mount') {\n            \n            hasChanges = true;\n            \n            // Get the callback parameter (first argument)\n            const callbackArg = node.arguments[0];\n            \n            if (ts.isArrowFunction(callbackArg)) {\n              let propNames = [];\n              \n              // Extract prop names if callback has parameters\n              if (callbackArg.parameters.length > 0) {\n                const firstParam = callbackArg.parameters[0];\n                \n                // Extract prop names from the parameter's type annotation\n                if (firstParam.type) {\n                  propNames = extractPropNames(firstParam.type);\n                }\n              }\n              \n              // Create new arrow function without the type annotation\n              const newCallback = ts.factory.createArrowFunction(\n                callbackArg.modifiers,\n                callbackArg.typeParameters,\n                callbackArg.parameters.map(param => \n                  ts.factory.createParameterDeclaration(\n                    param.modifiers,\n                    param.dotDotDotToken,\n                    param.name,\n                    param.questionToken,\n                    undefined, // Remove type annotation\n                    param.initializer\n                  )\n                ),\n                callbackArg.type,\n                callbackArg.equalsGreaterThanToken,\n                callbackArg.body\n              );\n\n              // Create new mount call with component name, props array, and callback\n              return ts.factory.createCallExpression(\n                node.expression,\n                node.typeArguments,\n                [\n                  ts.factory.createStringLiteral(componentName),\n                  ts.factory.createArrayLiteralExpression(\n                    propNames.map(name => ts.factory.createStringLiteral(name))\n                  ),\n                  newCallback\n                ]\n              );\n            }\n          }\n\n          return ts.visitEachChild(node, visit, context);\n        }\n\n        return ts.visitNode(rootNode, visit);\n      };\n    };\n\n    // Apply the transformation\n    const result = ts.transform(sourceFile, [transformer]);\n    \n    let finalCode = code;\n    \n    if (hasChanges) {\n      // Print the transformed AST back to code\n      const printer = ts.createPrinter();\n      finalCode = printer.printFile(result.transformed[0]);\n    }\n    \n    result.dispose();\n    \n    // Add import only if mount function is used\n    if (usesMountFunction) {\n      const importStatement = \"import { mount } from 'bond';\\n\\n\";\n      finalCode = importStatement + finalCode;\n    }\n    \n    return finalCode;\n  }\n\n\n  /**\n   * Parse blade script request\n   */\n  function parseBladeRequest(id) {\n    const [filename] = id.split('?', 2);\n    return { filename };\n  }\n\n  /**\n   * Check if this is a blade script request\n   */\n  function isBladeScriptRequest(id) {\n    return id.includes('?bond');\n  }\n\n  /**\n   * Setup file watcher for blade files\n   */\n  function setupWatcher() {\n    function handleFileChange(filePath) {\n      if (server) {\n        // Invalidate the main virtual module\n        const virtualModule = server.moduleGraph.getModuleById(resolvedVirtualModuleId);\n        if (virtualModule) {\n          server.reloadModule(virtualModule);\n        }\n        \n        // Find and invalidate the corresponding virtual .ts?bond module\n        const cleanPath = filePath.replace(/\\.blade\\.php$/, '');\n        const virtualScriptPath = `${cleanPath}.ts?bond`;\n        \n        const scriptModule = server.moduleGraph.getModuleById(virtualScriptPath);\n        if (scriptModule) {\n          server.reloadModule(scriptModule);\n        }\n        \n        // Force a full reload as fallback\n        server.ws.send({\n          type: 'full-reload'\n        });\n      }\n    }\n\n    server.watcher.on('change', handleFileChange)    \n    server.watcher.on('add', handleFileChange)    \n    server.watcher.on('unlink', handleFileChange)\n  }\n\n  return {\n    name: 'vite-bond-plugin',\n    \n    configureServer(devServer) {\n      server = devServer;\n\n      setupWatcher()\n    },\n\n    buildStart() {\n      // During build, automatically discover and add blade files to the build\n      const bladeFiles = findBladeFiles(resolve(viewsPath));\n      \n      for (const filePath of bladeFiles) {\n        try {\n          const content = readFileSync(filePath, 'utf-8');\n          const script = extractScriptSetup(content);\n          \n          if (script) {\n            this.addWatchFile(filePath);\n          }\n        } catch (error) {\n          console.warn(`[bond] Error processing ${filePath}:`, error.message);\n        }\n      }\n    },\n\n    resolveId(id) {\n      // Handle the main virtual module\n      if (id === virtualModuleId) {\n        return resolvedVirtualModuleId;\n      }\n      \n      // Handle bond module alias\n      if (id === 'bond') {\n        return resolve(process.cwd(), 'vendor/ganyicz/bond/dist/mount.js');\n      }\n      \n      // Handle blade script requests similar to Vue's approach\n      if (isBladeScriptRequest(id)) {\n        return id; // Return as-is, we'll handle it in load\n      }\n      return null;\n    },\n\n    load(id) {\n      // Handle the main virtual module that imports all blade scripts\n      if (id === resolvedVirtualModuleId) {\n        const bladeFiles = findBladeFiles(resolve(viewsPath));\n        const imports = [];\n        \n        for (const filePath of bladeFiles) {\n          try {\n            const content = readFileSync(filePath, 'utf-8');\n            const script = extractScriptSetup(content);\n            \n            if (script) {\n              // Create a .ts virtual file so Vite handles TypeScript transformation\n              // Remove .blade.php and add .ts extension\n              const cleanPath = filePath.replace(/\\.blade\\.php$/, '');\n              const virtualPath = `${cleanPath}.ts?bond`;\n              imports.push(`import '${virtualPath}';`);\n            }\n          } catch (error) {\n            console.warn(`[bond] Error processing ${filePath}:`, error.message);\n          }\n        }\n        \n        const moduleContent = imports.length > 0 \n          ? imports.join('\\n') \n          : '// No blade script setup blocks found';\n        \n        return moduleContent;\n      }\n      \n      // Handle blade script requests\n      if (isBladeScriptRequest(id)) {\n        const { filename } = parseBladeRequest(id);\n        \n        try {\n          // Remove the .ts extension and add back .blade.php to get the actual file\n          const actualFilename = filename.replace(/\\.ts$/, '.blade.php');\n          \n          const content = readFileSync(actualFilename, 'utf-8');\n          const script = extractScriptSetup(content);\n          \n          if (script) {\n            // Transform mount() calls before returning\n            const transformedScript = transformMountCalls(script, actualFilename);\n            return transformedScript;\n          } else {\n            console.warn(`[bond] No script setup found in ${actualFilename}`);\n            return 'export {};'; // Empty module\n          }\n        } catch (error) {\n          console.error(`[bond] Error loading blade script ${filename}:`, error.message);\n          return 'export {};'; // Empty module fallback\n        }\n      }\n\n      return null;\n    },\n\n    transform(_, id) {\n      // Transform main blade files to import their script setup content\n      if (id.endsWith('.blade.php') && !isBladeScriptRequest(id)) {\n        try {\n          const content = readFileSync(id, 'utf-8');\n          const script = extractScriptSetup(content);\n          \n          if (script) {\n            // Generate import for the script setup block\n            const importStatement = `import '${id}.ts?bond';`;\n            \n            // Return the import as the module content\n            return {\n              code: importStatement,\n              map: null\n            };\n          }\n        } catch (error) {\n          console.warn(`[bond] Error transforming blade file ${id}:`, error.message);\n        }\n      }\n\n      return null;\n    },\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
